#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 11 02:57:15 2021

@author: yulong

下記の問題をプログラミングしてみよう！
マップ上をへびが移動していきます。
マップの行数 H と列数 W ,障害物を # で移動可能な場所を . で表した H 行 W 列のマップ S_1 ... S_H ,現在の座標 sy , sx ,方向転換の回数 N が与えられます。
続けて N 回の方向転換をおこなう時刻 t_1 ... t_N, 転換する向き d_1 ... d_N が与えられます。
へびははじめは北を向いています。
へびは進む先のマスに自分の身体や障害物がない時に移動ができます。
時刻 0 から 99 までの間、へびは各時刻に次の行動を最大 100 回繰り返します。

・ 方向転換をおこなう時刻の場合、指定の向きに方向転換したのち １ マス身体を伸ばす。そうでない時は、今向いている方向に １ マス身体を伸ばす。

時刻が 99 の時の行動を終えるか、移動できなくなった時、移動を終了します。
移動終了時にへびの体のあるマスを ＊ にしたマップを出力してください。
なお、マスの座標系は左上端のマスの座標を ( y , x ) = ( 0 , 0 ) とし、
下方向が y 座標の正の向き、右方向が x 座標の正の向きとします。

移動の一例をあげます。例えば次のような入力が与えられた時は図のような移動になります。
図は、時刻 T の行動前の状態を表しています。

5 5 3 1 3       
.....       
.....       
.....       
.....       
.....       
2 R     
4 R     
6 R     







▼　下記解答欄にコードを記入してみよう

入力される値
H W　sy sx N        
S_0     
...     
S_(H-1)     
t_1 d_1     
...     
t_N d_N


・ １行目では、盤面の行数 H ,列数 W , 石を置くマスの y , x 座標 である Y , X が与えられます。
・ 続く H 行のうち i 行目 (0 ≦ i < H) には、盤面の i 行目の文字をまとめた文字列 S_i が与えられ、 S_i の j 文字目は、盤面の i 行目の j 列目に書かれている文字を表します。
・ 続く N 行のうち i 行目 (1 ≦ i ≦ N) には、i 回目の方向転換をおこなう時刻 t_i と、方向転換の向き d_i が与えられます。

入力値最終行の末尾に改行が１つ入ります。
文字列は標準入力から渡されます。 標準入力からの値取得方法はこちらをご確認ください
期待する出力
H 行の出力

条件
すべてのテストケースにおいて、以下の条件をみたします。

・ 1 ≦ H, W ≦ 50
・ 1 ≦ N ≦ 100
・ 0 ≦ sy < H
・ 0 ≦ sx < W
・ 1 ≦ t_i ≦ 99
・ t_i < t_(i+1)
・ 時刻は 0 から始まり、99 の時の移動を終えるまでもしくは移動ができなくなるまで移動を繰り返す。
・ S_i は W 文字の文字列
・ マップ上の (sy, sx) のマスは必ず '.'
・ S の各文字は '.' または '#'
・ d_i は、 L, R のいずれかであり、それぞれ 左・右 を意味します。

入力例1
5 5 3 1 3
.....
.....
.....
.....
.....
2 R
4 R
6 R

出力例1
.....
.***.
.*.*.
.***.
.....

入力例2
18 39 12 1 20
........................#...........#..
.......................................
.......................................
.........#........#..#.........#.......
.............................#.......#.
.......................................
...................................#...
......................................#
...................#...................
.......................................
....................................#..
.......................#.....#.....#...
..............................#........
....#..............#.....#......#......
.......................................
.....#.................................
...#..................#................
......#............................#.#.
3 R
8 R
13 L
16 R
19 L
21 L
30 R
32 L
37 R
40 L
42 R
48 R
62 R
73 R
77 R
79 R
83 L
84 R
94 R
99 L

出力例2
........................#...........#..
................*******................
................*.....*................
.........#...****.#..#*........#.......
.............*........*......#.......#.
.............*........*................
.............*........*............#...
.............*........*...............#
...........***.....#..*................
.******....*..........*................
.*....*....*..........*.............#..
.*....*....*..........*#.....#.....#...
.*....*....*..........*.......#........
....#.*....*.......#..*..#......#......
......****.*..........*................
.....#...*.************................
...#.....*.*..........#................
......#..***.......................#.#.
"""
"""
def move(f,sy,sx):
    if faces[f]=="N": sy=sy-1;
    elif faces[f]=="E": sx=sx+1;
    elif faces[f]=="S": sy=sy+1;
    elif faces[f]=="W": sx=sx-1;
    return (sy,sx)

def turn(d,f):
    if d=="L":
        f=(f+3)%4
    elif d=="R":
        f=(f+1)%4
    return(f)
    
h,w,sy,sx,n=map(int,input().split())
s=[list(input()) for _ in range(h)]
f=0; t=0; s[sy][sx]="*"
faces=["N","E","S","W"]
for _ in range(n):
    tn,d=input().split()
    tn=int(tn)
    flag=False
    for _ in range(tn-t):
        (sy,sx)=move(f,sy,sx)
        if sy<0 or sy>=h or sx<0 or sx>=w or s[sy][sx]=="#"or s[sy][sx]=="*":
            #print("Stop")
            flag=True
            break
        else:
            s[sy][sx]="*"
            #print(sy,sx)
    if flag:
        break
    f=turn(d,f)
    t=tn
    
for y in range(int(h)):
    print("".join(s[y]))
"""    
    
h, w, sy, sx, n = map(int, input().split())
s = [list(input()) for _ in range(int(h))]
time_lr = [input().split() for _ in range(int(n))]
directions = ["N", "E", "S", "W"]
now_direction = 0
time_index = 0
s[sy][sx] = "*"

for t_now in range(100):
    if time_index < n and str(t_now) == time_lr[time_index][0]:
        d = time_lr[time_index][1]
        time_index += 1
        if d == "L":
            now_direction = (3 + now_direction) % 4
        else:
            now_direction = (1 + now_direction) % 4

    if directions[now_direction] == "N":
        sy -= 1
    elif directions[now_direction] == "E":
        sx += 1
    elif directions[now_direction] == "S":
        sy += 1
    elif directions[now_direction] == "W":
        sx -= 1

    if sx < 0 or sx >= int(w) or sy < 0 or sy >= int(h) or s[sy][sx] != ".":
        break
    else:
        s[sy][sx] = "*"

for y in range(int(h)):
    for x in range(int(w)):
        print(s[y][x], end="")
    print()